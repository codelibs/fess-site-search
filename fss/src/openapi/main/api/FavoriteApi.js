/**
 * Fess - User API
 * This is a Fess Server based on the OpenAPI 3.0 specification.  
 *
 * The version of the OpenAPI document: 14.8.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';
import ListFavorites200Response from '../model/ListFavorites200Response';
import SetFavorite201Response from '../model/SetFavorite201Response';

/**
* Favorite service.
* @module api/FavoriteApi
* @version 14.8.0
*/
export default class FavoriteApi {

    /**
    * Constructs a new FavoriteApi. 
    * @alias module:api/FavoriteApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * List favorites
     * Returns favorited document IDs
     * @param {String} queryId Query ID where the document is contained
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListFavorites200Response} and HTTP response
     */
    listFavoritesWithHttpInfo(queryId) {
      let postBody = null;
      // verify the required parameter 'queryId' is set
      if (queryId === undefined || queryId === null) {
        throw new Error("Missing the required parameter 'queryId' when calling listFavorites");
      }

      let pathParams = {
      };
      let queryParams = {
        'queryId': queryId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListFavorites200Response;
      return this.apiClient.callApi(
        '/favorites', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List favorites
     * Returns favorited document IDs
     * @param {String} queryId Query ID where the document is contained
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListFavorites200Response}
     */
    listFavorites(queryId) {
      return this.listFavoritesWithHttpInfo(queryId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Set a favorite mark
     * Set a favorite mark to the document
     * @param {String} docId Document ID to be favorited
     * @param {String} queryId Query ID where the document is contained
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SetFavorite201Response} and HTTP response
     */
    setFavoriteWithHttpInfo(docId, queryId) {
      let postBody = null;
      // verify the required parameter 'docId' is set
      if (docId === undefined || docId === null) {
        throw new Error("Missing the required parameter 'docId' when calling setFavorite");
      }
      // verify the required parameter 'queryId' is set
      if (queryId === undefined || queryId === null) {
        throw new Error("Missing the required parameter 'queryId' when calling setFavorite");
      }

      let pathParams = {
        'docId': docId
      };
      let queryParams = {
        'queryId': queryId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SetFavorite201Response;
      return this.apiClient.callApi(
        '/documents/{docId}/favorite', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Set a favorite mark
     * Set a favorite mark to the document
     * @param {String} docId Document ID to be favorited
     * @param {String} queryId Query ID where the document is contained
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SetFavorite201Response}
     */
    setFavorite(docId, queryId) {
      return this.setFavoriteWithHttpInfo(docId, queryId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
